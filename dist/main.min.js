(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'birdy-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"/Users/kertap/Developer/birdy/src/js/states/boot.js","./states/game":"/Users/kertap/Developer/birdy/src/js/states/game.js","./states/menu":"/Users/kertap/Developer/birdy/src/js/states/menu.js","./states/preloader":"/Users/kertap/Developer/birdy/src/js/states/preloader.js","./states/splash":"/Users/kertap/Developer/birdy/src/js/states/splash.js","./utils":"/Users/kertap/Developer/birdy/src/js/utils.js"}],"/Users/kertap/Developer/birdy/src/js/entities/player.js":[function(require,module,exports){
var cursors;
var Player = function (game, x, y) {
    // Phaser.Sprite.call(this, game, x, y, 'testsprite');
    // game.add.existing(this);
    // The player and its settings
    //this.player = this.game.add.sprite(32, this.game.world.height - 150, 'dude');
    Phaser.Sprite.call(this, game, x, y, 'dude');
    game.add.existing(this);
 
    //  We need to enable physics on the player
    game.physics.arcade.enable(this);
 
    //  Player physics properties. Give the little guy a slight bounce.
    this.body.bounce.y = 0.1;
    this.body.gravity.y = 600;
    this.body.collideWorldBounds = true;
 
    //  Our two animations, walking left and right.
    this.animations.add('left', [0, 1, 2, 3], 10, true);
    this.animations.add('right', [5, 6, 7, 8], 10, true);

    cursors = game.input.keyboard.createCursorKeys();
}

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
  // Easy controls
  //
  // While the player is on the ground 
  //  left right walk left right, stopping stops automatically
  //  up jumps up, momentum carries the player
  if (this.body.touching.down) {
    this.body.velocity.x = 0;
    if (cursors.left.isDown) {
      // Move to the left
      this.body.velocity.x = -150;

      this.animations.play('left');
    } else if (cursors.right.isDown) {
      // Move to the right
      this.body.velocity.x = 150;

      this.animations.play('right');
    } else {
      // Stand Still
      this.animations.stop();

      this.frame = 4;
    }
  }
  //  Allow the player to jump if they are touching the ground.
  if (cursors.up.isDown && this.body.touching.down)
  {
      this.body.velocity.y = -150;
  }
  // Wehn the player is in the air
  //  use wasd, get the facing
  //  -> facing thrust forward
  //  <- facing thrust backward
  //  w thrust up
  //  d drop legs
    // //  Reset the players velocity (movement)    
    // if (this.body.touching.down) {
    //   this.body.drag.x = 300;
    //   //this.body.velocity.x = 0;
 
    //   if (cursors.left.isDown)
    //   {
    //       //  Move to the left
    //       this.body.velocity.x = -150;
   
    //       this.animations.play('left');
    //   }
    //   else if (cursors.right.isDown)
    //   {
    //       //  Move to the right
    //       this.body.velocity.x = 150;
   
    //       this.animations.play('right');
    //   }
    //   else
    //   {
    //       //  Stand still
    //       this.animations.stop();
   
    //       this.frame = 4;
    //   }
    // } else {
    //     this.body.drag.x = 0;
    // }
    // 
    // //  Allow the player to jump if they are touching the ground.
    // if (cursors.up.isDown && this.body.touching.down)
    // {
    //     this.body.velocity.y = -150;
    // }
};

module.exports = Player;

},{}],"/Users/kertap/Developer/birdy/src/js/entities/stars.js":[function(require,module,exports){
var Stars = function(game) {
  this.group = game.add.group();
  this.group.enableBody = true;
  //  Here we'll create 12 of them evenly spaced apart
  for (var i = 0; i < 12; i++)
  {
      //  Create a star inside of the 'stars' group
      var star = this.group.create(i * 70, 0, 'star');

      //  Let gravity do its thing
      star.body.gravity.y = 6;

      //  This just gives each star a slightly random bounce value
      star.body.bounce.y = 0.7 + Math.random() * 0.2;
  }
};

module.exports = Stars;

Stars.prototype = {
};

},{}],"/Users/kertap/Developer/birdy/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"/Users/kertap/Developer/birdy/src/js/states/game.js":[function(require,module,exports){
var Player = require('../entities/player');
var Stars = require('../entities/stars');

var Game = function () {
  this.testentity = null;
};

module.exports = Game;
var score = 0;
var scoreText;

Game.prototype = {

  create: function () {
    this.game.world.setBounds(0, 0, 1171, 600);
    //  We're going to be using physics, so enable the Arcade Physics system
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
 
    //  A simple background for our game
    this.game.add.sprite(0, 0, 'bg');
 
    //  The platforms group contains the ground and the 2 ledges we can jump on
    this.platforms = this.game.add.group();
 
    //  We will enable physics for any object that is created in this group
    this.platforms.enableBody = true;
 
    // Here we create the ground.
    var ground = this.platforms.create(0, this.game.world.height - 64, 'ground');
 
    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
    ground.scale.setTo(3, 2);
 
    //  This stops it from falling away when you jump on it
    ground.body.immovable = true;
 
    // The player and its settings
    this.player = new Player(this.game, 32, this.game.world.height - 150);

    this.game.camera.follow(this.player);

  },

  update: function () {
    //  Collide the player and the stars with the platforms
    this.game.physics.arcade.collide(this.player, this.platforms);
  }
};

},{"../entities/player":"/Users/kertap/Developer/birdy/src/js/entities/player.js","../entities/stars":"/Users/kertap/Developer/birdy/src/js/entities/stars.js"}],"/Users/kertap/Developer/birdy/src/js/states/menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],"/Users/kertap/Developer/birdy/src/js/states/preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test.png');
    this.load.image('bg', 'assets/bg.png');
    this.load.image('ground', 'assets/platform.png');
    this.load.image('star', 'assets/star.png');
    this.load.spritesheet('dude', 'assets/dude.png', 32, 48);
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Menu');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"/Users/kertap/Developer/birdy/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"/Users/kertap/Developer/birdy/src/js/utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,
